/* COMMANDS:
  INSTANT COMMAND: pumpi,2|4,10,--,--,--,--,--,--,--,--,--,--,--,--,--,--,3|4,15,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,_!
  RECURRING COMMAND: pumpr,2|4,10,--,--,--,--,--,--,--,--,--,--,--,--,--,--,3|4,15,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,_!
  TURN OFF ALL PUMPS WITH: pumpr,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,_!
  ACKNOWLEDGMENT TO RUN: pumpa,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,--,_!
*/


/* LIBRARIES */
#include <Arduino.h>
#include <evolver_si.h>
#include <Tlc5940.h>


/* VARIABLES */
// Serial event variables
String input_string = "";
boolean string_complete = false;

// Echo response variables
String comma = ",";
String end_mark = "end";
String address = "pump";

// Input variables
const int num_pumps = 48;
evolver_si si("pump", "_!", num_pumps + 1);// 49 CSV-inputs from RPI 
boolean new_input = false;
String saved_inputs[48];

// Pump control variables
double operation_time;
int repetition_interval;
int speedset[2] = {4095, 0}; // (fully OFF, ON)


/* CLASS TO CONTROL EACH PUMP */
class Pump {
  boolean running = false;
  int address;
  int operation_time = 0;
  int repetition_interval = 0;
  unsigned long previous_timestamp = 0; // milliseconds

  public:
    Pump(){}

    // Sets address for each pump if applicable. 
    void init(int init_address){      
      address = init_address;
    }

    // Checks based on settings whether to start/stop pumping. 
    void update(){
      unsigned long current_timestamp = millis();

      // STOP pump if it's running and operation time has expired.
      if (current_timestamp - previous_timestamp > operation_time && running){
        running = false;
        Tlc.set(LEFT_PWM, address, speedset[0]);
      }

      // START the pump if repeating is desired
      if (current_timestamp - previous_timestamp > repetition_interval && !running && repetition_interval != 0){
        previous_timestamp = current_timestamp;
        running = true;
        Tlc.set(LEFT_PWM, address, speedset[1]);
      }
    }

    // Turns ON the pump based on passed command
    void setPump(float operation_time_set, int repetition_interval_set) {
      // Conversion to millis
      operation_time = operation_time_set * 1000;
      repetition_interval = repetition_interval_set * 1000;

      // START pump and set timing
      previous_timestamp = millis();
      running = true;
      Tlc.set(LEFT_PWM, address, speedset[1]);
    }

    // Turns OFF the pump
    void turnOff() {
      running = false;
      Tlc.set(LEFT_PWM, address, speedset[0]);
    }

    // Checks if the pump config matches a chemostat experiment
    bool isNewChemostat(float new_operation_time, int new_repetition_interval){
      // Conversion to millis
      new_operation_time *= 1000;
      new_repetition_interval *= 1000;

      return (new_operation_time == operation_time && new_repetition_interval == repetition_interval);
    }
};

Pump pumps[num_pumps];



/********************************** SETUP **********************************/
void setup() {
  Serial1.begin(9600);
  SerialUSB.begin(9600);
  while (!Serial1);
  
  // Communication
  pinMode(12, OUTPUT);
  digitalWrite(12, LOW);
  input_string.reserve(2000); // reserve 2000 bytes for the input_string

  // PWM control object
  Tlc.init(LEFT_PWM, speedset[0]);

  // Pump control object
  for (int i = 0; i < num_pumps; i++){
    pumps[i].init(i);
  }
}



/********************************** LOOP **********************************/
void loop() {
  serialEvent();
  if (string_complete){

    si.analyzeAndCheck(input_string);
    if (si.address_found){

      // Instant or recurring command 
      if (si.input_array[0] == "i" || si.input_array[0] == "r") {
         
        SerialUSB.println("Saving Setpoints...");
        for (int i = 1; i < num_pumps + 1; i++) {
          saved_inputs[i - 1] = si.input_array[i];
        }
        
        SerialUSB.println("Echoing pump commands:");
        echoCommand();
        SerialUSB.println("Waiting for OK to execute...\n");
        new_input = true;
      }
     
      // Acknoledgment to run command
      if (si.input_array[0] == "a" && new_input){
        for (int i = 0; i < num_pumps; i++){
          if (saved_inputs[i] != "--"){
            int split_index = saved_inputs[i].indexOf("|");

            if (split_index == -1){    
              operation_time = saved_inputs[i].toFloat();
              repetition_interval = 0;

            }else{
              operation_time = saved_inputs[i].substring(0, split_index).toFloat();
              repetition_interval = saved_inputs[i].substring(split_index + 1).toInt();
            }

            if (repetition_interval != 0 && pumps[i].isNewChemostat(operation_time, repetition_interval)){
               SerialUSB.print("Unaltered chemostat: ");
               SerialUSB.println(i);             
            }
          }
        
        SerialUSB.print("Pump ");
        SerialUSB.print(i);
        SerialUSB.println(": Command Executed!");
        new_input = false;
        }
      }
        
    input_string = "";
    }

    si.address_found = false;
    string_complete = false;
  }

  // Update all the pumps
  for (int i = 0; i < num_pumps; i++) {
      pumps[i].update();
  }
  Tlc.update();

  // Clears strings if too long
  if (input_string.length() > 2000){
    SerialUSB.println("Cleared Input String");
    input_string = "";
  }
}



/********************************** FUNCTIONS **********************************/
// This function will read the Serial1 object onto input_ttring
void serialEvent(){

  while (Serial1.available()){    
    char input_char = (char)Serial1.read();
    input_string += input_char;

    if (input_char == '!'){
      string_complete = true;
      break;
    }
  }
}


// This function echoes the commands received
void echoCommand(){
  digitalWrite(12, HIGH);  
  String output_string = address + "e,";

  for (int i = 0; i < num_pumps; i++) {
    output_string += si.input_array[i + 1] + comma;
  }
  output_string += end_mark;

  delay(100);
  SerialUSB.println(output_string);
  Serial1.print(output_string);

  delay(100);
  digitalWrite(12, LOW);
}