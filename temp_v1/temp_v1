/* COMMANDS:
  Recurring Command: "tempr,4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,_!"
  Immediate Command: "tempi,4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,_!"
  Acknowledgement to Run: "tempa,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,_!"
*/


/* LIBRARIES */
#include <Arduino.h>
#include <evolver_si.h>
#include <Tlc5940.h>
#include <PID_v1.h>


/* VARIABLES */
// Serial event variables
String input_string = "";
boolean string_complete = false;

// Broadcast and echo response variables
String comma = ",";
String end_mark = "end";
String address = "temp";

// Input variables
int num_vials = 16;
evolver_si si("temp", "_!", num_vials + 1); // 17 CSV-inputs from RPI
boolean new_input = false;
int saved_inputs[] = {4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,4095};

// Mux control pin variables; for the ADC board
int m0 = 7, m1 = 8, m2 = 9, m3 = 10, m_out = 0;

// PID variables
double Setpoint[] = {4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,4095,4095};
double Output[16], Input[16];
int Kp = 6500;
int Ki = 20;
int Kd = 2;


/* PID SETTINGS*/
PID pid1(&Input[0], &Output[0], &Setpoint[0], Kp, Ki, Kd, DIRECT);//650, 12, 2
PID pid2(&Input[1], &Output[1], &Setpoint[1], Kp, Ki, Kd, DIRECT);
PID pid3(&Input[2], &Output[2], &Setpoint[2], Kp, Ki, Kd, DIRECT);
PID pid4(&Input[3], &Output[3], &Setpoint[3], Kp, Ki, Kd, DIRECT);
PID pid5(&Input[4], &Output[4], &Setpoint[4], Kp, Ki, Kd, DIRECT);
PID pid6(&Input[5], &Output[5], &Setpoint[5], Kp, Ki, Kd, DIRECT);
PID pid7(&Input[6], &Output[6], &Setpoint[6], Kp, Ki, Kd, DIRECT);
PID pid8(&Input[7], &Output[7], &Setpoint[7], Kp, Ki, Kd, DIRECT);
PID pid9(&Input[8], &Output[8], &Setpoint[8], Kp, Ki, Kd, DIRECT);
PID pid10(&Input[9], &Output[9], &Setpoint[9], Kp, Ki, Kd, DIRECT);
PID pid11(&Input[10], &Output[10], &Setpoint[10], Kp, Ki, Kd, DIRECT);
PID pid12(&Input[11], &Output[11], &Setpoint[11], Kp, Ki, Kd, DIRECT);
PID pid13(&Input[12], &Output[12], &Setpoint[12], Kp, Ki, Kd, DIRECT);
PID pid14(&Input[13], &Output[13], &Setpoint[13], Kp, Ki, Kd, DIRECT);
PID pid15(&Input[14], &Output[14], &Setpoint[14], Kp, Ki, Kd, DIRECT);
PID pid16(&Input[15], &Output[15], &Setpoint[15], Kp, Ki, Kd, DIRECT);
PID *allPIDS[16] = {&pid1, &pid2, &pid3, &pid4, &pid5, &pid6, &pid7, &pid8, &pid9, &pid10, &pid11, &pid12, &pid13, &pid14, &pid15, &pid16};



/********************************** SETUP **********************************/
void setup(){
  SerialUSB.begin(9600);
  Serial1.begin(9600);
  while (!Serial1);

  // Communication 
  pinMode(12, OUTPUT);
  digitalWrite(12, LOW);
  input_string.reserve(2000); // reserve 2000 bytes for the input_string

  // ADC control pins
  pinMode(m0, OUTPUT);
  pinMode(m1, OUTPUT);
  pinMode(m2, OUTPUT);
  pinMode(m3, OUTPUT);

  digitalWrite(m0, LOW);
  digitalWrite(m1, LOW);
  digitalWrite(m2, LOW);
  digitalWrite(m3, LOW);

  analogReadResolution(12);

  // PWM control object
  Tlc.init(LEFT_PWM, 4095);
  
  // PID control object
  for (int i = 0; i < num_vials; i++) {
    allPIDS[i]->SetOutputLimits(0, 4095);
    allPIDS[i]->SetMode(AUTOMATIC);
  }
}



/********************************** LOOP **********************************/
void loop(){
  serialEvent();
  if (string_complete){

    si.analyzeAndCheck(input_string);
    if (si.address_found){
     
      // Instant or recurring command      
      if (si.input_array[0] == "i" || si.input_array[0] == "r"){
        
        SerialUSB.println("Saving Setpoints...");
        for (int i = 1; i < num_vials + 1; i++){
          saved_inputs[i - 1] = si.input_array[i].toInt();
        }
        
        SerialUSB.println("Echoing temperature commands:");
        echoCommand();
        SerialUSB.println("Broadcast response (PID):");
        broadcastResponse();
        
        SerialUSB.println("Waiting for OK to execute...\n");
        new_input = true;
      }

      // Acknoledgment to run command
      if (si.input_array[0] == "a" && new_input){
        updateValues();
        SerialUSB.println("Command Executed!");
        new_input = false;
      }

      input_string = "";
    }

    // Clears strings if too long
    if (input_string.length() > 900){
      SerialUSB.println("Cleared Input String");
      input_string = "";
    }

    si.address_found = false;
    string_complete = false;
  }

  // Update PID every loop for better temp control
  readMuxShield();
}



/********************************** FUNCTIONS **********************************/
// This function will read the Serial1 object onto input_string
void serialEvent(){

  while (Serial1.available()){    
    char input_char = (char)Serial1.read();
    input_string += input_char;

    if (input_char == '!'){
      string_complete = true;
      break;
    }
  }
}


// This function echoes the commands received
void echoCommand(){
  digitalWrite(12, HIGH);
   String output_string = address + "e,";
   
   for (int i = 0; i < num_vials; i++){
    output_string += saved_inputs[i] + comma;
   }
   output_string += end_mark;

  delay(100);
   SerialUSB.println(output_string);
   Serial1.print(output_string);

   delay(100);
   digitalWrite(12, LOW);
}


// This function will echo the command received
void broadcastResponse(){
  digitalWrite(12, HIGH);
  String output_string = address + "b,";

  for (int i = 0; i < num_vials; i++){
    output_string += String((int)Input[i]) + comma;
  }
  output_string += end_mark;

  delay(100);
  SerialUSB.println(output_string);
  Serial1.print(output_string);
  
  delay(100);
  digitalWrite(12, LOW);
}


// This function will update the PID setpoints
void updateValues(){
  for (int i = 0; i < num_vials; i++){
    Setpoint[i] = (double)saved_inputs[i];
  }
}


// This function takes the mux values and updates the PID with them
void readMuxShield(){

  int avg_of = 3;
  unsigned long avg_sum[num_vials];  
  int mux_readings[num_vials];
  memset(avg_sum, 0, sizeof(avg_sum));

  for (int i = 0; i < avg_of; i++){
    for (int j = 0; j < num_vials; j++){
      avg_sum[j] += readMux(j);
    }
  }

  for (int i = 0; i < num_vials; i++){
    mux_readings[i] = avg_sum[i] / avg_of;
    Input[i] = mux_readings[i];
  }

  for (int i = 0; i < num_vials; i++){
    allPIDS[i]->Compute();
    int set_value = Output[i];
    Tlc.set(LEFT_PWM, i, set_value);
    //SerialUSB.println(Output[i]);
  }
  
  while (Tlc.update());
}


// This function controls the mux pins on the ADC board
int readMux(int channel){
  
  int control_pins[] = {m0, m1, m2, m3};
  int mux_channels[16][4] = {
    {0, 0, 0, 0}, //channel 0; Vial 1
    {1, 1, 0, 0}, //channel 3; Vial 2
    {1, 0, 0, 0}, //channel 1; Vial 3
    {0, 1, 0, 0}, //channel 2; Vial 4
    {0, 0, 1, 0}, //channel 4; Vial 5
    {1, 1, 1, 0}, //channel 7; Vial 6
    {1, 0, 1, 0}, //channel 5; Vial 7
    {0, 1, 1, 0}, //channel 6; Vial 8
    {0, 0, 0, 1}, //channel 8; Vial 9
    {1, 1, 0, 1}, //channel 11; Vial 10
    {1, 0, 0, 1}, //channel 9; Vial 11
    {0, 1, 0, 1}, //channel 10; Vial 12
    {0, 0, 1, 1}, //channel 12; Vial 13
    {1, 1, 1, 1}, //channel 15; Vial 14
    {1, 0, 1, 1}, //channel 13; Vial 15
    {0, 1, 1, 1}, //channel 14; Vial 16
  };

  // Sweeping through control pins to select desired channel
  for (int i = 0; i < 4; i ++) {
    digitalWrite(control_pins[i], mux_channels[channel][i]);
  }

  // Read the value at the channel
  int value = analogRead(m_out);
  return value;
}